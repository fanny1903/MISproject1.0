/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ulb.mis.view;

import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.text.ParseException;
import java.util.List;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.swing.JOptionPane;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import ulb.mis.controller.DoctorJpaController;
import ulb.mis.controller.PatientJpaController;
import ulb.mis.controller.PersonJpaController;
import ulb.mis.controller.exceptions.IllegalOrphanException;
import ulb.mis.controller.exceptions.NonexistentEntityException;
import ulb.mis.model.Patient;
import ulb.mis.controller.exceptions.IllegalOrphanException;
import ulb.mis.controller.exceptions.NonexistentEntityException;
import ulb.mis.model.Doctor;
//import static ulb.mis.model.Patient_.iddesignateddoctor;

/**
 *
 * @author Liya
 */
public class CreatePatientAccount extends javax.swing.JFrame {
    private final EntityManagerFactory emfac = Persistence.createEntityManagerFactory("MISproject_PU");
    private final PatientJpaController patientCtrl = new PatientJpaController(emfac);
    private final PersonJpaController personCtrl = new PersonJpaController(emfac);
    private final DoctorJpaController doctorCtrl = new DoctorJpaController(emfac);
    
   
    
    
    
    private static final Logger LOGGER = LogManager.getLogger(CreatePatientAccount.class.getName());
    
    Patient patient = null;
    
    /**
     * Creates new form AddPatientWindow
     */
    public CreatePatientAccount() {
        initComponents();
        iddesignatedDoctorTextField.addFocusListener(new FocusAdapter() {
            @Override
            public void focusGained(FocusEvent e) {
                if (iddesignatedDoctorTextField.getText().equals("FAMILY NAME OF DOCTOR")) {
                    iddesignatedDoctorTextField.setText("");
                }
            }
        });

        iddesignatedDoctorTextField.addFocusListener(new FocusAdapter() {
            @Override
            public void focusLost(FocusEvent e) {
                if (iddesignatedDoctorTextField.getText().isEmpty()) {
                    iddesignatedDoctorTextField.setText("FAMILY NAME OF DOCTOR");
                }
            }
        });
    }
    
    public void setPatient(Patient patient){
        this.patient = patient;
        
        addPersonPanel1.setPerson(patient.getIdperson());
        iddesignatedDoctorTextField.setText(patient.getIddesignateddoctor().getIdperson().getLastname());
    }
    
    public Patient getPatient(){
        updatePatient();
                
        return patient;
    }
    
    
    public void updatePatient(){
        if( patient == null ){
            patient = new Patient();
        }
        
        patient.setIdperson(addPersonPanel1.getPerson());
        List<Doctor> doctors = doctorCtrl.findDoctorEntities();
        
        for(int i =0; i < doctors.size(); i++){ //FAnnyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
            if((doctors.get(i).getIdperson().getLastname()).equals(iddesignatedDoctorTextField.getText())){
                patient.setIddesignateddoctor(doctors.get(i));
                System.out.println("ouiiiii");
            }
            if(!(doctors.get(i).getIdperson().getLastname()).equals(iddesignatedDoctorTextField.getText())) {
                System.out.println("noooo");
                
            // Les informations d'identification sont incorrectes, affichez un message d'erreur ou effectuez une action appropriÃ©e
                //JOptionPane.showMessageDialog(this, "Invalid designated doctor credentials. Please try again.", "Account creation Error", JOptionPane.ERROR_MESSAGE);  
            }   
        }   
    }
    
    


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        saveButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        addPersonPanel1 = new ulb.mis.view.AddPersonPanel();
        jLabel2 = new javax.swing.JLabel();
        iddesignatedDoctorTextField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setBackground(new java.awt.Color(255, 153, 153));
        jLabel1.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 102, 102));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Create Patient Account");

        saveButton.setBackground(new java.awt.Color(255, 204, 102));
        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        cancelButton.setBackground(new java.awt.Color(255, 204, 102));
        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("Designated Doctor");

        iddesignatedDoctorTextField.setText("FAMILY NAME OF DOCTOR");
        iddesignatedDoctorTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iddesignatedDoctorTextFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addPersonPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(54, 54, 54)
                                .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(23, 23, 23)
                                .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(iddesignatedDoctorTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(42, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addPersonPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(iddesignatedDoctorTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        updatePatient();
        
        //Create person if necessary:
        if (patient.getIdperson().getIdperson() == null) {
            personCtrl.create(patient.getIdperson());
        }
        // Create patient if necessary:
        if (patient.getIdpatient() == null) {
            patientCtrl.create(patient);
        }

        // Save changes to person & patient.
        try {
            personCtrl.edit(patient.getIdperson());
            patientCtrl.edit(patient);
            //LOGGER.debug("Edited patient (id = %d)".formatted(patient.getIdpatient()));
        } catch (NonexistentEntityException | IllegalOrphanException ex) {
            LOGGER.error("Couldn't edit patient", ex);
        } catch (Exception ex){
            LOGGER.error("Couldn't edit patient", ex);
            
            
        }
        
        this.dispose();   
    }//GEN-LAST:event_saveButtonActionPerformed

    private void iddesignatedDoctorTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iddesignatedDoctorTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_iddesignatedDoctorTextFieldActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private ulb.mis.view.AddPersonPanel addPersonPanel1;
    private javax.swing.JButton cancelButton;
    private javax.swing.JTextField iddesignatedDoctorTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JButton saveButton;
    // End of variables declaration//GEN-END:variables
}
