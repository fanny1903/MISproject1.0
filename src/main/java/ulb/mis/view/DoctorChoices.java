/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ulb.mis.view;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.List;
import java.util.logging.Level;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.swing.JOptionPane;
import ulb.mis.controller.DoctorJpaController;
import ulb.mis.controller.PatientJpaController;
import ulb.mis.controller.PersonJpaController;
import ulb.mis.controller.exceptions.IllegalOrphanException;
import ulb.mis.controller.exceptions.NonexistentEntityException;
import ulb.mis.model.Doctor;
import ulb.mis.model.Patient;
//import ulb.mis.view.PatientChoices


/**
 *
 * @author fanny
 */
public class DoctorChoices extends javax.swing.JFrame {
    private final EntityManagerFactory emfac = Persistence.createEntityManagerFactory("MISproject_PU");
    private final DoctorJpaController doctorCtrl = new DoctorJpaController(emfac);
    private final PatientJpaController patientCtrl = new PatientJpaController(emfac);
    private final PersonJpaController personCtrl = new PersonJpaController(emfac);
    
    Doctor doctorLog = new Doctor();
    


    /**
     * Creates new form DoctorChoices
     */
    public DoctorChoices(Doctor doctor) {
        initComponents();
        doctorLog = doctor;
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titleLabel = new javax.swing.JLabel();
        deleteDoctorAccountButton = new javax.swing.JButton();
        doctorActivePatients = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        itemsList = new javax.swing.JList<>();
        AddSicknessButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        DoctorPathPdfTextField = new javax.swing.JTextField();
        PathOkButton = new javax.swing.JButton();
        notOkButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        sympTextArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        titleLabel.setBackground(new java.awt.Color(255, 204, 102));
        titleLabel.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        titleLabel.setForeground(new java.awt.Color(102, 102, 102));
        titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLabel.setText("Your doctor profile");
        titleLabel.setToolTipText("");
        titleLabel.setOpaque(true);

        deleteDoctorAccountButton.setBackground(new java.awt.Color(204, 204, 204));
        deleteDoctorAccountButton.setForeground(new java.awt.Color(255, 0, 0));
        deleteDoctorAccountButton.setText("Delete my account");
        deleteDoctorAccountButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteDoctorAccountButtonActionPerformed(evt);
            }
        });

        doctorActivePatients.setBackground(new java.awt.Color(255, 204, 102));
        doctorActivePatients.setText("My active patients");
        doctorActivePatients.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doctorActivePatientsActionPerformed(evt);
            }
        });

        itemsList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                itemsListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(itemsList);

        AddSicknessButton.setBackground(new java.awt.Color(255, 204, 102));
        AddSicknessButton.setText("add sickness");
        AddSicknessButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddSicknessButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Patient's symptoms");

        DoctorPathPdfTextField.setText("Path to your PDF");
        DoctorPathPdfTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DoctorPathPdfTextFieldActionPerformed(evt);
            }
        });

        PathOkButton.setBackground(new java.awt.Color(204, 255, 153));
        PathOkButton.setText("Approved");
        PathOkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PathOkButtonActionPerformed(evt);
            }
        });

        notOkButton.setBackground(new java.awt.Color(255, 153, 153));
        notOkButton.setText("Not approved");
        notOkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                notOkButtonActionPerformed(evt);
            }
        });

        sympTextArea.setColumns(20);
        sympTextArea.setRows(5);
        jScrollPane2.setViewportView(sympTextArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(titleLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(AddSicknessButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(doctorActivePatients, javax.swing.GroupLayout.DEFAULT_SIZE, 185, Short.MAX_VALUE))
                                .addGap(40, 40, 40)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 607, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jScrollPane2)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(DoctorPathPdfTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 395, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(68, 68, 68)
                                        .addComponent(notOkButton, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(38, 38, 38)
                                        .addComponent(PathOkButton, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(26, 26, 26))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(597, 597, 597)))
                        .addContainerGap(32, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(deleteDoctorAccountButton)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(doctorActivePatients, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(AddSicknessButton, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1))
                .addGap(41, 41, 41)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DoctorPathPdfTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(notOkButton)
                    .addComponent(PathOkButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                .addComponent(deleteDoctorAccountButton)
                .addGap(19, 19, 19))
        );
    }// </editor-fold>//GEN-END:initComponents


    
    private void deleteDoctorAccountButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteDoctorAccountButtonActionPerformed
         int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete your account?", "Confirm Account Deletion", JOptionPane.YES_NO_OPTION);
    
    if (confirm == JOptionPane.YES_OPTION) {
        try {
            // Delete the patient record from the database
            doctorCtrl.destroy(doctorLog.getIddoctor());
            personCtrl.destroy(doctorLog.getIdperson().getIdperson());

            // Display a success message
            JOptionPane.showMessageDialog(this, "Account deleted successfully.");
            
            // Close the current window
            this.dispose();
            
            // Optionally, perform any additional actions after deleting the account
            
        } catch (NonexistentEntityException ex) {
            // Handle exceptions if necessary
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "An error occurred while deleting the account.", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (IllegalOrphanException ex) {
            java.util.logging.Logger.getLogger(PatientChoices.class.getName()).log(Level.SEVERE, null, ex);
        }
    }        
    }//GEN-LAST:event_deleteDoctorAccountButtonActionPerformed

    private void refreshPatientList(){
        List patients = patientCtrl.findPatientByDoctor(doctorLog);
        EntityListModel<Patient> model = new EntityListModel(patients);
        
        itemsList.setModel(model);
    }
    
    private void doctorActivePatientsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doctorActivePatientsActionPerformed
        refreshPatientList();
        
        
        
    }//GEN-LAST:event_doctorActivePatientsActionPerformed

    private void AddSicknessButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddSicknessButtonActionPerformed
        addSickness addSicknessPopup = new addSickness();
        addSicknessPopup.setVisible(true);
    }//GEN-LAST:event_AddSicknessButtonActionPerformed

    private void PathOkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PathOkButtonActionPerformed
        String filePath = DoctorPathPdfTextField.getText(); // Path to the PDF file to save

        byte[] pdfData = null;  //create a byte instance
        try (FileInputStream fileInputStream = new FileInputStream(filePath)) {
            
            // Create a byte array with the length equal to the file size
            pdfData = new byte[fileInputStream.available()];

            // Read the file content into the byte array
            fileInputStream.read(pdfData);
        } catch (IOException e) {
            // Handle any potential errors while reading the file
            e.printStackTrace();
            // You might want to display an error message to the user here
            return;
        }

        // Take the selected patient
        if (itemsList.getSelectedIndex() < 0) {
            return;
        }

        EntityListModel<Patient> model = (EntityListModel) itemsList.getModel();
        Patient selected = model.getList().get(itemsList.getSelectedIndex());

        // Set the selected patient's "file" blob attribute to the pdf sent by the doctor
        selected.setFile(pdfData);
        selected.setMsgFileReceived(true);
        try {
            patientCtrl.edit(selected);
        } catch (Exception ex) {
            java.util.logging.Logger.getLogger(DoctorChoices.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_PathOkButtonActionPerformed


    private void DoctorPathPdfTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DoctorPathPdfTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DoctorPathPdfTextFieldActionPerformed

    private void notOkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_notOkButtonActionPerformed
        // Take the selected patient
        if (itemsList.getSelectedIndex() < 0) {
            return;
        }

        EntityListModel<Patient> model = (EntityListModel) itemsList.getModel();
        Patient selected = model.getList().get(itemsList.getSelectedIndex());
        
        selected.setMsg(true);
        selected.setIdsickness(null);
        try {
            patientCtrl.edit(selected);
        } catch (Exception ex) {
            java.util.logging.Logger.getLogger(DoctorChoices.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_notOkButtonActionPerformed

    private void itemsListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_itemsListMouseClicked
        if (itemsList.getSelectedIndex() < 0) {
            return;
        }

        EntityListModel<Patient> model = (EntityListModel) itemsList.getModel();
        Patient selected = model.getList().get(itemsList.getSelectedIndex());

        if (evt.getClickCount() == 2) {
            selected.getIdsickness();
            sympTextArea.setText(selected.getIdsickness().getSymptom1()
                    + "\n" + selected.getIdsickness().getSymptom2() + "\n"
                    + selected.getIdsickness().getSymptom3() + "\n" + selected.getIdsickness().getSymptom4());
        }

    }//GEN-LAST:event_itemsListMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddSicknessButton;
    private javax.swing.JTextField DoctorPathPdfTextField;
    private javax.swing.JButton PathOkButton;
    private javax.swing.JButton deleteDoctorAccountButton;
    private javax.swing.JButton doctorActivePatients;
    private javax.swing.JList<String> itemsList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton notOkButton;
    private javax.swing.JTextArea sympTextArea;
    private javax.swing.JLabel titleLabel;
    // End of variables declaration//GEN-END:variables

}
